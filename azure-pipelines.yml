# Go
# Build and test your Go application.
# Add steps that save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    cd ./app
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies and run tests'
  
- script: |
    ls -l
    pwd
  workingDirectory: '$(modulePath)'
  displayName: 'path name'

# Docker Compose
# Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.
- task: DockerCompose@0
  inputs:
    dockerComposeFile: /home/vsts/work/1/s/gopath/src/github.com/vin-yu/pipelines-go/flyway/docker-compose.yml
    action: Run a Docker Compose command
    dockerComposeCommand: build

- task: DockerCompose@0
  inputs:
    dockerComposeFile: /home/vsts/work/1/s/gopath/src/github.com/vin-yu/pipelines-go/flyway/docker-compose.yml
    action: Run a Docker Compose command
    dockerComposeCommand: up -d

- script: |
    sleep 150s
  workingDirectory: '$(modulePath)'
  displayName: 'path name'