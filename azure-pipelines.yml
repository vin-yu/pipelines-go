# Go
# Build and test your Go application.
# Add steps that save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    cd ./app
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies and run tests'
  
- script: |
    ls -l
    pwd
    ECHO '$(modulePath)/flyway/docker-compose.yml'
  workingDirectory: '$(modulePath)'
  displayName: 'path name'

# Docker Compose
# Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.
- task: DockerCompose@0
  inputs:
    #containerregistrytype: 'Azure Container Registry' # Options: azure Container Registry, container Registry
    #dockerRegistryEndpoint: # Optional
    #azureSubscription: # Optional
    #azureContainerRegistry: # Optional
    dockerComposeFile: '$(modulePath)/flyway/docker-compose.yml' 
    #additionalDockerComposeFiles: # Optional
    #dockerComposeFileArgs: # Optional
    #projectName: '$(Build.Repository.Name)' # Optional
    #qualifyImageNames: true # Optional
    action: 'run Services'
    #additionalImageTags: # Optional
    #includeSourceTags: false # Optional
    #includeLatestTag: false # Optional
    #buildImages: true # Optional
    #serviceName: # Required when action == Run A Specific Service
    #containerName: # Optional
    #ports: # Optional
    #workingDirectory: '$(modulePath)'
    #entrypoint: # Optional
    #containerCommand: # Optional
    #detached: true # Optional
    #abortOnContainerExit: true # Optional
    #imageDigestComposeFile: '$(Build.StagingDirectory)/docker-compose.images.yml' # Required when action == Write Service Image Digests
    #removeBuildOptions: false # Optional
    #baseResolveDirectory: # Optional
    #outputDockerComposeFile: '$(Build.StagingDirectory)/docker-compose.yml' # Required when action == Lock Services || Action == Combine Configuration
    #dockerComposeCommand: # Required when action == Run A Docker Compose Command
    #dockerHostEndpoint: # Optional
    #nopIfNoDockerComposeFile: false # Optional
    #requireAdditionalDockerComposeFiles: false # Optional
    #currentWorkingDirectory: '$(System.DefaultWorkingDirectory)' # Optional